#include <I2CScanner.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SoftwareSerial.h> 
#define aref_voltage 3.3
#define OLED_reset=4;
#define SCREEN_ADDRESS 0x3c

SoftwareSerial BT(10, 9);   
int OLED_RESET = 4;
Adafruit_SSD1306 display(OLED_RESET);

const unsigned char myBitmapMaker [] PROGMEM = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff,
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xfe, 0x00, 0x10, 0x07, 0xc1, 0x83, 0xc0, 0x78, 0x00, 0xfc, 0x06, 0x03, 0x80, 0x7f, 0xff,
  0xff, 0xfe, 0x00, 0x10, 0x01, 0xc0, 0x83, 0x80, 0x30, 0x00, 0x7c, 0x06, 0x01, 0x00, 0x3f, 0xff,
  0xff, 0xfe, 0x00, 0x10, 0x00, 0xc0, 0x83, 0x00, 0x10, 0x00, 0x7c, 0x06, 0x01, 0x00, 0x3f, 0xff,
  0xff, 0xfe, 0x00, 0x10, 0x00, 0xc0, 0x83, 0x00, 0x00, 0x00, 0x7c, 0x02, 0x01, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x00, 0x10, 0x20, 0xc0, 0x83, 0x04, 0x08, 0x00, 0xfc, 0x02, 0x01, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xc0, 0x83, 0x04, 0x0f, 0x07, 0xfc, 0x02, 0x01, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xc0, 0x83, 0x06, 0x1f, 0x07, 0xfc, 0x00, 0x01, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xc0, 0x83, 0x01, 0xff, 0x07, 0xfc, 0x00, 0x01, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x00, 0xc0, 0x83, 0x00, 0xff, 0x07, 0xfc, 0x00, 0x01, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x01, 0xc0, 0x83, 0x80, 0x3f, 0x07, 0xfc, 0x00, 0x01, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x01, 0xc0, 0x83, 0xc0, 0x1f, 0x07, 0xfc, 0x00, 0x01, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x00, 0xc0, 0x83, 0xe0, 0x1f, 0x07, 0xfc, 0x00, 0x01, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xc0, 0x83, 0xf8, 0x0f, 0x07, 0xfc, 0x00, 0x01, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xc0, 0x83, 0x04, 0x0f, 0x07, 0xfc, 0x00, 0x01, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xc0, 0x83, 0x06, 0x0f, 0x07, 0xfc, 0x10, 0x01, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xc0, 0x83, 0x06, 0x0f, 0x07, 0xfc, 0x10, 0x01, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xc0, 0x83, 0x04, 0x0f, 0x07, 0xfc, 0x10, 0x01, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xc0, 0x03, 0x00, 0x0f, 0x07, 0xfc, 0x10, 0x81, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xe0, 0x07, 0x00, 0x1f, 0x07, 0xfc, 0x10, 0x81, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xc0, 0xf0, 0x20, 0xf0, 0x0f, 0x80, 0x3f, 0x07, 0xfc, 0x10, 0x81, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x04, 0x41, 0x81, 0xfc, 0x0f, 0xe0, 0xc0, 0xe0, 0x70, 0x42, 0x01, 0x00, 0xff, 0xff,
  0xff, 0xff, 0x04, 0x40, 0x81, 0xf8, 0x0f, 0xc0, 0x40, 0xc0, 0x70, 0x42, 0x01, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0x04, 0x40, 0x81, 0xf8, 0x0f, 0xc0, 0x40, 0xc0, 0x30, 0x42, 0x01, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0x04, 0x40, 0x81, 0xf8, 0x07, 0xc0, 0x40, 0xc0, 0x30, 0x02, 0x01, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x04, 0xc0, 0x81, 0xf8, 0x07, 0xc0, 0x40, 0xc0, 0x30, 0x06, 0x0f, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x05, 0xc0, 0x01, 0xf8, 0x07, 0xc0, 0x00, 0xc0, 0x30, 0x06, 0x0f, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x07, 0xc0, 0x01, 0xf8, 0x07, 0xc0, 0x00, 0xc0, 0x30, 0x06, 0x03, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x07, 0xc0, 0x01, 0xf0, 0x07, 0xc0, 0x00, 0xc0, 0x30, 0x0e, 0x01, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0x07, 0xc0, 0x01, 0xf0, 0x07, 0xc0, 0x00, 0xc0, 0x30, 0x0e, 0x01, 0x00, 0xff, 0xff,
  0xff, 0xff, 0x07, 0xc0, 0x01, 0xf0, 0x87, 0xc0, 0x00, 0x80, 0x10, 0x06, 0x01, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x07, 0xc0, 0x01, 0xf0, 0x83, 0xc0, 0x00, 0x80, 0x10, 0x06, 0x0f, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x07, 0xc0, 0x01, 0xf0, 0x03, 0xc0, 0x00, 0x80, 0x10, 0x06, 0x0f, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x07, 0xc0, 0x01, 0xf0, 0x03, 0xc0, 0x10, 0x80, 0x10, 0x02, 0x0f, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x07, 0xc0, 0x21, 0xf0, 0x03, 0xc0, 0x10, 0x80, 0x10, 0x02, 0x01, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x07, 0xc2, 0x21, 0xf0, 0xc3, 0xc0, 0x10, 0x82, 0x10, 0x42, 0x01, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x07, 0xc2, 0x21, 0xe0, 0xc3, 0xc1, 0x10, 0x86, 0x00, 0x42, 0x01, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x07, 0xc2, 0x21, 0xf0, 0xc3, 0xe3, 0x10, 0x86, 0x10, 0x40, 0x01, 0x0c, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff,
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};












int readings = 0;
float temperature = 0;
int measurements = 10;

#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C
#define aref_voltage 1.1

void setup() {
 
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  // Draw the bitmap:
  // drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
  display.drawBitmap(0, 0, myBitmapMaker, 128, 64, WHITE);
  display.display();
  delay(5000); // Pause for 5 seconds
  // Clear the buffer
  display.clearDisplay();
    

  pinMode(A1, INPUT); // Use A0 to measure the temperature sensor's output
  
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // initialize with the I2C addr 0x3C (for the 128x32)
  display.setTextSize(3); // Set the text size
  display.setTextColor(WHITE); // Set the text color
 delay(1000);
  Serial.begin(9600); 
  BT.begin(9600); 

  analogReference(EXTERNAL); 
}

void loop() {
  
 
  
  readings = 0; // Reset the analog readings to 0
for(int i=0; i<measurements; i++){ // Make multiple measurements to take average from, avoiding large fluctuations
    readings += analogRead(A1); // Read the temperature sensor's output
  
    delay(250);
  }
  
 float temperature = ((((readings/measurements) * 5.0)/1024) - 0.5) * 100; // Convert the average voltage output to degrees Celsius
    
  display.clearDisplay(); // Clear the display
  display.setCursor(0,0); // Set the cursor at the beginning of the display
  display.print(temperature,1); // Print temperature with single decimal
  display.println(" C"); // Append the unit
  display.display(); // Display the temperature and unit on the display
 
  




   float reading = analogRead(A1); 
float voltage = reading * (3.3 / 1024.0);
               

  Serial.print(voltage,2);  

  Serial.println(" volts");                          

  // Convert the voltage into the temperature in Celsius:
  float temperatureC = (voltage - 0.5) * 100;

 

 

  Serial.print(temperature,1);  

  Serial.println(" degrees C");                      

 

  BT.println("Hello from Arduino UNO!"); 

  BT.println("Sending temperature data via BT"); 

  BT.print("Temperature is:  "); 

  BT.print(temperature,1); 

  BT.println(" deg C");                               

  delay(1000); 
 
}
